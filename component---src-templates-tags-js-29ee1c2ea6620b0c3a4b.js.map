{"version":3,"sources":["webpack:///./src/components/Banner.js","webpack:///./src/templates/tags.js","webpack:///./src/components/BlogItem.js"],"names":["Banner","content","propsTypes","PropTypes","string","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","index","node","nodeObj","BlogItemStyles","styled","article","BlogItem","props","excerpt","frontmatter","title","date","path","featuredImageAlt","fluid","featuredImage","childImageSharp","key","to","alt","className"],"mappings":"8FAAA,qCAGMA,EAAS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OAAO,4BAAKA,IAGdD,EAAOE,WAAa,CAClBD,QARF,OAQWE,EAAUC,QAGNJ,O,kCCXf,wDAiDeK,UA3CF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,oCACE,6BACE,kBAAC,IAAD,CAAQP,QAASW,IAEhBF,EAAMG,KAAI,WAAWC,GAAW,IAAnBC,EAAkB,EAAlBA,KACZ,OAAO,kBAAC,IAAD,CAAUC,QAASD,EAAMD,MAAOA,W,kCCnBjD,sEAOMG,EAPN,UAOuBC,EAAOC,QAAV,+EAAGD,CAAH,sgCAsILE,IAhDE,SAAAC,GAAU,IACjBP,EAAUO,EAAVP,MACAQ,EAAYD,EAAML,QAAlBM,QAFgB,EAGwBD,EAAML,QAAQO,YAAtDC,EAHgB,EAGhBA,MAAOC,EAHS,EAGTA,KAAMC,EAHG,EAGHA,KAAMC,EAHH,EAGGA,iBACnBC,EAAUP,EAAML,QAAQO,YAAYM,cAAcC,gBAAlDF,MAER,OACE,kBAACX,EAAD,CAAgBc,IAAG,aAAejB,GAC/Bc,GACC,gCACE,kBAAC,OAAD,CAAMI,GAAIN,GACR,kBAAC,IAAD,CAAKE,MAAOA,EAAOK,IAAKN,MAK7BH,GACC,4BACE,kBAAC,OAAD,CAAMQ,GAAIN,GAAOF,IAIpBF,GACC,6BACE,2BAAIA,GACHI,GACC,yBAAKQ,UAAU,QACb,kBAAC,OAAD,CAAMA,UAAU,WAAWF,GAAIN,GAC7B,kBAAC,IAAD,OAEF,4BAAKD","file":"component---src-templates-tags-js-29ee1c2ea6620b0c3a4b.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Banner = ({ content }) => {\n  return <h1>{content}</h1>\n}\n\nBanner.propsTypes = {\n  content: PropTypes.string,\n}\n\nexport default Banner\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\nimport BlogItem from \"../components/BlogItem\"\nimport Banner from \"../components/Banner\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <>\n      <div>\n        <Banner content={tagHeader} />\n\n        {edges.map(({ node }, index) => {\n          return <BlogItem nodeObj={node} index={index} />\n        })}\n      </div>\n    </>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            // fields: PropTypes.shape({\n            //   slug: PropTypes.string.isRequired,\n            // }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YY\")\n            path\n            tags\n            featuredImage {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Button from \"./Button\"\nimport Img from \"gatsby-image\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\n\nconst BlogItemStyles = styled.article`\n  margin: calc(var(--spacing) * 4) 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto auto auto;\n  grid-gap: var(--spacing);\n\n  @media (min-width: 768px) {\n    margin: calc(var(--spacing) * 6) 0;\n    grid-template-rows: auto auto;\n    grid-gap: calc(var(--spacing) * 2);\n  }\n\n  @media (min-width: 1200px) {\n    margin: calc(var(--spacing) * 8) 0;\n    grid-gap: calc(var(--spacing) * 3);\n  }\n\n  > figure {\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n    overflow: hidden;\n    background-color: #000;\n    margin: 0;\n    opacity: 1;\n\n    img {\n      transition: transform var(--transSlow) ease, opacity var(--transSlow) ease !important;\n      opacity: 1;\n    }\n  }\n\n  &:hover {\n    > figure {\n      img {\n        transform: scale(1.1);\n        opacity: 0.5 !important;\n      }\n    }\n  }\n\n  h2 {\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    font-size: var(--h3);\n    margin: 0;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  @media (min-width: 768px) {\n    h2 {\n      grid-column: 1 / 2;\n    }\n  }\n\n  > div {\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    p {\n      margin-top: 0;\n    }\n    @media (min-width: 768px) {\n      grid-column: 2 / 3;\n      grid-row: 2 / 3;\n\n      p {\n        margin-bottom: calc(var(--spacing) * 2);\n      }\n    }\n  }\n\n  .meta {\n    display: flex;\n    justify-content: space-between;\n\n    h4 {\n      margin: 0;\n      font-size: var(--h5);\n      color: var(--primaryColor);\n    }\n  }\n`\n\nconst BlogItem = props => {\n  const { index } = props\n  const { excerpt } = props.nodeObj\n  const { title, date, path, featuredImageAlt } = props.nodeObj.frontmatter\n  const { fluid } = props.nodeObj.frontmatter.featuredImage.childImageSharp\n\n  return (\n    <BlogItemStyles key={`blog-item-${index}`}>\n      {fluid && (\n        <figure>\n          <Link to={path}>\n            <Img fluid={fluid} alt={featuredImageAlt} />\n          </Link>\n        </figure>\n      )}\n\n      {title && (\n        <h2>\n          <Link to={path}>{title}</Link>\n        </h2>\n      )}\n\n      {excerpt && (\n        <div>\n          <p>{excerpt}</p>\n          {path && (\n            <div className=\"meta\">\n              <Link className=\"btn-link\" to={path}>\n                <Button />\n              </Link>\n              <h4>{date}</h4>\n            </div>\n          )}\n        </div>\n      )}\n    </BlogItemStyles>\n  )\n}\n\nBlogItem.propTypes = {\n  fluid: PropTypes.object,\n  alt: PropTypes.string,\n  title: PropTypes.string,\n  excerpt: PropTypes.string,\n  path: PropTypes.string,\n  date: PropTypes.string,\n}\n\nexport default BlogItem\n"],"sourceRoot":""}